/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
	validator "gopkg.in/validator.v2"
	"fmt"
)

// MultipieceShipment200Response - struct for MultipieceShipment200Response
type MultipieceShipment200Response struct {
	MultipieceDomesticShipmentResponse *MultipieceDomesticShipmentResponse
	MultipieceInternationalShipmentResponse *MultipieceInternationalShipmentResponse
}

// MultipieceDomesticShipmentResponseAsMultipieceShipment200Response is a convenience function that returns MultipieceDomesticShipmentResponse wrapped in MultipieceShipment200Response
func MultipieceDomesticShipmentResponseAsMultipieceShipment200Response(v *MultipieceDomesticShipmentResponse) MultipieceShipment200Response {
	return MultipieceShipment200Response{
		MultipieceDomesticShipmentResponse: v,
	}
}

// MultipieceInternationalShipmentResponseAsMultipieceShipment200Response is a convenience function that returns MultipieceInternationalShipmentResponse wrapped in MultipieceShipment200Response
func MultipieceInternationalShipmentResponseAsMultipieceShipment200Response(v *MultipieceInternationalShipmentResponse) MultipieceShipment200Response {
	return MultipieceShipment200Response{
		MultipieceInternationalShipmentResponse: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MultipieceShipment200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into MultipieceDomesticShipmentResponse
	err = newStrictDecoder(data).Decode(&dst.MultipieceDomesticShipmentResponse)
	if err == nil {
		jsonMultipieceDomesticShipmentResponse, _ := json.Marshal(dst.MultipieceDomesticShipmentResponse)
		if string(jsonMultipieceDomesticShipmentResponse) == "{}" { // empty struct
			dst.MultipieceDomesticShipmentResponse = nil
		} else {
			if err = validator.Validate(dst.MultipieceDomesticShipmentResponse); err != nil {
				dst.MultipieceDomesticShipmentResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultipieceDomesticShipmentResponse = nil
	}

	// try to unmarshal data into MultipieceInternationalShipmentResponse
	err = newStrictDecoder(data).Decode(&dst.MultipieceInternationalShipmentResponse)
	if err == nil {
		jsonMultipieceInternationalShipmentResponse, _ := json.Marshal(dst.MultipieceInternationalShipmentResponse)
		if string(jsonMultipieceInternationalShipmentResponse) == "{}" { // empty struct
			dst.MultipieceInternationalShipmentResponse = nil
		} else {
			if err = validator.Validate(dst.MultipieceInternationalShipmentResponse); err != nil {
				dst.MultipieceInternationalShipmentResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.MultipieceInternationalShipmentResponse = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.MultipieceDomesticShipmentResponse = nil
		dst.MultipieceInternationalShipmentResponse = nil

		return fmt.Errorf("data matches more than one schema in oneOf(MultipieceShipment200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(MultipieceShipment200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MultipieceShipment200Response) MarshalJSON() ([]byte, error) {
	if src.MultipieceDomesticShipmentResponse != nil {
		return json.Marshal(&src.MultipieceDomesticShipmentResponse)
	}

	if src.MultipieceInternationalShipmentResponse != nil {
		return json.Marshal(&src.MultipieceInternationalShipmentResponse)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MultipieceShipment200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.MultipieceDomesticShipmentResponse != nil {
		return obj.MultipieceDomesticShipmentResponse
	}

	if obj.MultipieceInternationalShipmentResponse != nil {
		return obj.MultipieceInternationalShipmentResponse
	}

	// all schemas are nil
	return nil
}

type NullableMultipieceShipment200Response struct {
	value *MultipieceShipment200Response
	isSet bool
}

func (v NullableMultipieceShipment200Response) Get() *MultipieceShipment200Response {
	return v.value
}

func (v *NullableMultipieceShipment200Response) Set(val *MultipieceShipment200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipieceShipment200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipieceShipment200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipieceShipment200Response(val *MultipieceShipment200Response) *NullableMultipieceShipment200Response {
	return &NullableMultipieceShipment200Response{value: val, isSet: true}
}

func (v NullableMultipieceShipment200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipieceShipment200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


