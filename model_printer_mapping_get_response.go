/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
	"time"
)

// checks if the PrinterMappingGetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrinterMappingGetResponse{}

// PrinterMappingGetResponse struct for PrinterMappingGetResponse
type PrinterMappingGetResponse struct {
	// The printer connected (directly or via network) to a computer.
	Alias *string `json:"alias,omitempty"`
	// A Device Serial number.
	SerialNumber *string `json:"serialNumber,omitempty"`
	// The Printer name which is used for mapping.
	PrinterName *string `json:"printerName,omitempty"`
	// The subscription ID used for mapping.
	SubId *string `json:"subId,omitempty"`
	// It records saved Timestamp.
	InsertTimeStamp *time.Time `json:"insertTimeStamp,omitempty"`
	// It records updated Timestamp.
	UpdateTimeStamp *time.Time `json:"updateTimeStamp,omitempty"`
}

// NewPrinterMappingGetResponse instantiates a new PrinterMappingGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrinterMappingGetResponse() *PrinterMappingGetResponse {
	this := PrinterMappingGetResponse{}
	return &this
}

// NewPrinterMappingGetResponseWithDefaults instantiates a new PrinterMappingGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrinterMappingGetResponseWithDefaults() *PrinterMappingGetResponse {
	this := PrinterMappingGetResponse{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *PrinterMappingGetResponse) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrinterMappingGetResponse) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *PrinterMappingGetResponse) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *PrinterMappingGetResponse) SetAlias(v string) {
	o.Alias = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *PrinterMappingGetResponse) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrinterMappingGetResponse) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *PrinterMappingGetResponse) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *PrinterMappingGetResponse) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetPrinterName returns the PrinterName field value if set, zero value otherwise.
func (o *PrinterMappingGetResponse) GetPrinterName() string {
	if o == nil || IsNil(o.PrinterName) {
		var ret string
		return ret
	}
	return *o.PrinterName
}

// GetPrinterNameOk returns a tuple with the PrinterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrinterMappingGetResponse) GetPrinterNameOk() (*string, bool) {
	if o == nil || IsNil(o.PrinterName) {
		return nil, false
	}
	return o.PrinterName, true
}

// HasPrinterName returns a boolean if a field has been set.
func (o *PrinterMappingGetResponse) HasPrinterName() bool {
	if o != nil && !IsNil(o.PrinterName) {
		return true
	}

	return false
}

// SetPrinterName gets a reference to the given string and assigns it to the PrinterName field.
func (o *PrinterMappingGetResponse) SetPrinterName(v string) {
	o.PrinterName = &v
}

// GetSubId returns the SubId field value if set, zero value otherwise.
func (o *PrinterMappingGetResponse) GetSubId() string {
	if o == nil || IsNil(o.SubId) {
		var ret string
		return ret
	}
	return *o.SubId
}

// GetSubIdOk returns a tuple with the SubId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrinterMappingGetResponse) GetSubIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubId) {
		return nil, false
	}
	return o.SubId, true
}

// HasSubId returns a boolean if a field has been set.
func (o *PrinterMappingGetResponse) HasSubId() bool {
	if o != nil && !IsNil(o.SubId) {
		return true
	}

	return false
}

// SetSubId gets a reference to the given string and assigns it to the SubId field.
func (o *PrinterMappingGetResponse) SetSubId(v string) {
	o.SubId = &v
}

// GetInsertTimeStamp returns the InsertTimeStamp field value if set, zero value otherwise.
func (o *PrinterMappingGetResponse) GetInsertTimeStamp() time.Time {
	if o == nil || IsNil(o.InsertTimeStamp) {
		var ret time.Time
		return ret
	}
	return *o.InsertTimeStamp
}

// GetInsertTimeStampOk returns a tuple with the InsertTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrinterMappingGetResponse) GetInsertTimeStampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.InsertTimeStamp) {
		return nil, false
	}
	return o.InsertTimeStamp, true
}

// HasInsertTimeStamp returns a boolean if a field has been set.
func (o *PrinterMappingGetResponse) HasInsertTimeStamp() bool {
	if o != nil && !IsNil(o.InsertTimeStamp) {
		return true
	}

	return false
}

// SetInsertTimeStamp gets a reference to the given time.Time and assigns it to the InsertTimeStamp field.
func (o *PrinterMappingGetResponse) SetInsertTimeStamp(v time.Time) {
	o.InsertTimeStamp = &v
}

// GetUpdateTimeStamp returns the UpdateTimeStamp field value if set, zero value otherwise.
func (o *PrinterMappingGetResponse) GetUpdateTimeStamp() time.Time {
	if o == nil || IsNil(o.UpdateTimeStamp) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTimeStamp
}

// GetUpdateTimeStampOk returns a tuple with the UpdateTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrinterMappingGetResponse) GetUpdateTimeStampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTimeStamp) {
		return nil, false
	}
	return o.UpdateTimeStamp, true
}

// HasUpdateTimeStamp returns a boolean if a field has been set.
func (o *PrinterMappingGetResponse) HasUpdateTimeStamp() bool {
	if o != nil && !IsNil(o.UpdateTimeStamp) {
		return true
	}

	return false
}

// SetUpdateTimeStamp gets a reference to the given time.Time and assigns it to the UpdateTimeStamp field.
func (o *PrinterMappingGetResponse) SetUpdateTimeStamp(v time.Time) {
	o.UpdateTimeStamp = &v
}

func (o PrinterMappingGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrinterMappingGetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.PrinterName) {
		toSerialize["printerName"] = o.PrinterName
	}
	if !IsNil(o.SubId) {
		toSerialize["subId"] = o.SubId
	}
	if !IsNil(o.InsertTimeStamp) {
		toSerialize["insertTimeStamp"] = o.InsertTimeStamp
	}
	if !IsNil(o.UpdateTimeStamp) {
		toSerialize["updateTimeStamp"] = o.UpdateTimeStamp
	}
	return toSerialize, nil
}

type NullablePrinterMappingGetResponse struct {
	value *PrinterMappingGetResponse
	isSet bool
}

func (v NullablePrinterMappingGetResponse) Get() *PrinterMappingGetResponse {
	return v.value
}

func (v *NullablePrinterMappingGetResponse) Set(val *PrinterMappingGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePrinterMappingGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePrinterMappingGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrinterMappingGetResponse(val *PrinterMappingGetResponse) *NullablePrinterMappingGetResponse {
	return &NullablePrinterMappingGetResponse{value: val, isSet: true}
}

func (v NullablePrinterMappingGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrinterMappingGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


