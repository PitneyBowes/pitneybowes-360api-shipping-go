/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SchedulePickupDHLEXPRequestPickupAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulePickupDHLEXPRequestPickupAddress{}

// SchedulePickupDHLEXPRequestPickupAddress It specifies the address from where your parcels will be available for pickup
type SchedulePickupDHLEXPRequestPickupAddress struct {
	// Name of the person, It should not contain special character or numeric value
	Name string `json:"name"`
	// Address line1 of the pickup address
	AddressLine1 string `json:"addressLine1"`
	// City of the pickup address
	CityTown string `json:"cityTown"`
	// State province of the pickup address
	StateProvince string `json:"stateProvince"`
	// Postal Code of the pickup address
	PostalCode string `json:"postalCode"`
	// ISO-2 characters country code
	CountryCode string `json:"countryCode"`
	// Phone number
	Phone string `json:"phone"`
	// Company name of pickup address
	Company *string `json:"company,omitempty"`
	// Email. A Confirmation email will be send to this email id when pickup gets scheduled successfully.
	Email *string `json:"email,omitempty"`
}

type _SchedulePickupDHLEXPRequestPickupAddress SchedulePickupDHLEXPRequestPickupAddress

// NewSchedulePickupDHLEXPRequestPickupAddress instantiates a new SchedulePickupDHLEXPRequestPickupAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulePickupDHLEXPRequestPickupAddress(name string, addressLine1 string, cityTown string, stateProvince string, postalCode string, countryCode string, phone string) *SchedulePickupDHLEXPRequestPickupAddress {
	this := SchedulePickupDHLEXPRequestPickupAddress{}
	this.Name = name
	this.AddressLine1 = addressLine1
	this.CityTown = cityTown
	this.StateProvince = stateProvince
	this.PostalCode = postalCode
	this.CountryCode = countryCode
	this.Phone = phone
	return &this
}

// NewSchedulePickupDHLEXPRequestPickupAddressWithDefaults instantiates a new SchedulePickupDHLEXPRequestPickupAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulePickupDHLEXPRequestPickupAddressWithDefaults() *SchedulePickupDHLEXPRequestPickupAddress {
	this := SchedulePickupDHLEXPRequestPickupAddress{}
	return &this
}

// GetName returns the Name field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) SetName(v string) {
	o.Name = v
}

// GetAddressLine1 returns the AddressLine1 field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetAddressLine1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value
// and a boolean to check if the value has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetAddressLine1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AddressLine1, true
}

// SetAddressLine1 sets field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) SetAddressLine1(v string) {
	o.AddressLine1 = v
}

// GetCityTown returns the CityTown field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetCityTown() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CityTown
}

// GetCityTownOk returns a tuple with the CityTown field value
// and a boolean to check if the value has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetCityTownOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CityTown, true
}

// SetCityTown sets field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) SetCityTown(v string) {
	o.CityTown = v
}

// GetStateProvince returns the StateProvince field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetStateProvince() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateProvince
}

// GetStateProvinceOk returns a tuple with the StateProvince field value
// and a boolean to check if the value has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetStateProvinceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateProvince, true
}

// SetStateProvince sets field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) SetStateProvince(v string) {
	o.StateProvince = v
}

// GetPostalCode returns the PostalCode field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetCountryCode returns the CountryCode field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetPhone returns the Phone field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetPhone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value
// and a boolean to check if the value has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phone, true
}

// SetPhone sets field value
func (o *SchedulePickupDHLEXPRequestPickupAddress) SetPhone(v string) {
	o.Phone = v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *SchedulePickupDHLEXPRequestPickupAddress) SetCompany(v string) {
	o.Company = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SchedulePickupDHLEXPRequestPickupAddress) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SchedulePickupDHLEXPRequestPickupAddress) SetEmail(v string) {
	o.Email = &v
}

func (o SchedulePickupDHLEXPRequestPickupAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulePickupDHLEXPRequestPickupAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["addressLine1"] = o.AddressLine1
	toSerialize["cityTown"] = o.CityTown
	toSerialize["stateProvince"] = o.StateProvince
	toSerialize["postalCode"] = o.PostalCode
	toSerialize["countryCode"] = o.CountryCode
	toSerialize["phone"] = o.Phone
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

func (o *SchedulePickupDHLEXPRequestPickupAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"addressLine1",
		"cityTown",
		"stateProvince",
		"postalCode",
		"countryCode",
		"phone",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchedulePickupDHLEXPRequestPickupAddress := _SchedulePickupDHLEXPRequestPickupAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchedulePickupDHLEXPRequestPickupAddress)

	if err != nil {
		return err
	}

	*o = SchedulePickupDHLEXPRequestPickupAddress(varSchedulePickupDHLEXPRequestPickupAddress)

	return err
}

type NullableSchedulePickupDHLEXPRequestPickupAddress struct {
	value *SchedulePickupDHLEXPRequestPickupAddress
	isSet bool
}

func (v NullableSchedulePickupDHLEXPRequestPickupAddress) Get() *SchedulePickupDHLEXPRequestPickupAddress {
	return v.value
}

func (v *NullableSchedulePickupDHLEXPRequestPickupAddress) Set(val *SchedulePickupDHLEXPRequestPickupAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulePickupDHLEXPRequestPickupAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulePickupDHLEXPRequestPickupAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulePickupDHLEXPRequestPickupAddress(val *SchedulePickupDHLEXPRequestPickupAddress) *NullableSchedulePickupDHLEXPRequestPickupAddress {
	return &NullableSchedulePickupDHLEXPRequestPickupAddress{value: val, isSet: true}
}

func (v NullableSchedulePickupDHLEXPRequestPickupAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulePickupDHLEXPRequestPickupAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


