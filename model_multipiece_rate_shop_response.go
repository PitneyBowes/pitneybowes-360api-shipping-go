/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
)

// checks if the MultipieceRateShopResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultipieceRateShopResponse{}

// MultipieceRateShopResponse description
type MultipieceRateShopResponse struct {
	FromAddress *MultipieceRatesRequestFromAddress `json:"fromAddress,omitempty"`
	ToAddress *MultipieceRatesRequestToAddress `json:"toAddress,omitempty"`
	// description
	ServiceId *string `json:"serviceId,omitempty"`
	// description
	Rates []MultipieceRateShopResponseRatesInner `json:"rates,omitempty"`
	// It display any error while getting rates
	Errors []MultipieceRateShopResponseErrorsInner `json:"errors,omitempty"`
}

// NewMultipieceRateShopResponse instantiates a new MultipieceRateShopResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipieceRateShopResponse() *MultipieceRateShopResponse {
	this := MultipieceRateShopResponse{}
	return &this
}

// NewMultipieceRateShopResponseWithDefaults instantiates a new MultipieceRateShopResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipieceRateShopResponseWithDefaults() *MultipieceRateShopResponse {
	this := MultipieceRateShopResponse{}
	return &this
}

// GetFromAddress returns the FromAddress field value if set, zero value otherwise.
func (o *MultipieceRateShopResponse) GetFromAddress() MultipieceRatesRequestFromAddress {
	if o == nil || IsNil(o.FromAddress) {
		var ret MultipieceRatesRequestFromAddress
		return ret
	}
	return *o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipieceRateShopResponse) GetFromAddressOk() (*MultipieceRatesRequestFromAddress, bool) {
	if o == nil || IsNil(o.FromAddress) {
		return nil, false
	}
	return o.FromAddress, true
}

// HasFromAddress returns a boolean if a field has been set.
func (o *MultipieceRateShopResponse) HasFromAddress() bool {
	if o != nil && !IsNil(o.FromAddress) {
		return true
	}

	return false
}

// SetFromAddress gets a reference to the given MultipieceRatesRequestFromAddress and assigns it to the FromAddress field.
func (o *MultipieceRateShopResponse) SetFromAddress(v MultipieceRatesRequestFromAddress) {
	o.FromAddress = &v
}

// GetToAddress returns the ToAddress field value if set, zero value otherwise.
func (o *MultipieceRateShopResponse) GetToAddress() MultipieceRatesRequestToAddress {
	if o == nil || IsNil(o.ToAddress) {
		var ret MultipieceRatesRequestToAddress
		return ret
	}
	return *o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipieceRateShopResponse) GetToAddressOk() (*MultipieceRatesRequestToAddress, bool) {
	if o == nil || IsNil(o.ToAddress) {
		return nil, false
	}
	return o.ToAddress, true
}

// HasToAddress returns a boolean if a field has been set.
func (o *MultipieceRateShopResponse) HasToAddress() bool {
	if o != nil && !IsNil(o.ToAddress) {
		return true
	}

	return false
}

// SetToAddress gets a reference to the given MultipieceRatesRequestToAddress and assigns it to the ToAddress field.
func (o *MultipieceRateShopResponse) SetToAddress(v MultipieceRatesRequestToAddress) {
	o.ToAddress = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *MultipieceRateShopResponse) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipieceRateShopResponse) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *MultipieceRateShopResponse) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *MultipieceRateShopResponse) SetServiceId(v string) {
	o.ServiceId = &v
}

// GetRates returns the Rates field value if set, zero value otherwise.
func (o *MultipieceRateShopResponse) GetRates() []MultipieceRateShopResponseRatesInner {
	if o == nil || IsNil(o.Rates) {
		var ret []MultipieceRateShopResponseRatesInner
		return ret
	}
	return o.Rates
}

// GetRatesOk returns a tuple with the Rates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipieceRateShopResponse) GetRatesOk() ([]MultipieceRateShopResponseRatesInner, bool) {
	if o == nil || IsNil(o.Rates) {
		return nil, false
	}
	return o.Rates, true
}

// HasRates returns a boolean if a field has been set.
func (o *MultipieceRateShopResponse) HasRates() bool {
	if o != nil && !IsNil(o.Rates) {
		return true
	}

	return false
}

// SetRates gets a reference to the given []MultipieceRateShopResponseRatesInner and assigns it to the Rates field.
func (o *MultipieceRateShopResponse) SetRates(v []MultipieceRateShopResponseRatesInner) {
	o.Rates = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *MultipieceRateShopResponse) GetErrors() []MultipieceRateShopResponseErrorsInner {
	if o == nil || IsNil(o.Errors) {
		var ret []MultipieceRateShopResponseErrorsInner
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipieceRateShopResponse) GetErrorsOk() ([]MultipieceRateShopResponseErrorsInner, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *MultipieceRateShopResponse) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []MultipieceRateShopResponseErrorsInner and assigns it to the Errors field.
func (o *MultipieceRateShopResponse) SetErrors(v []MultipieceRateShopResponseErrorsInner) {
	o.Errors = v
}

func (o MultipieceRateShopResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultipieceRateShopResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FromAddress) {
		toSerialize["fromAddress"] = o.FromAddress
	}
	if !IsNil(o.ToAddress) {
		toSerialize["toAddress"] = o.ToAddress
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}
	if !IsNil(o.Rates) {
		toSerialize["rates"] = o.Rates
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableMultipieceRateShopResponse struct {
	value *MultipieceRateShopResponse
	isSet bool
}

func (v NullableMultipieceRateShopResponse) Get() *MultipieceRateShopResponse {
	return v.value
}

func (v *NullableMultipieceRateShopResponse) Set(val *MultipieceRateShopResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipieceRateShopResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipieceRateShopResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipieceRateShopResponse(val *MultipieceRateShopResponse) *NullableMultipieceRateShopResponse {
	return &NullableMultipieceRateShopResponse{value: val, isSet: true}
}

func (v NullableMultipieceRateShopResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipieceRateShopResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


