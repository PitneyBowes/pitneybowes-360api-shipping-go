/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SpecialServiceBatchERR type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecialServiceBatchERR{}

// SpecialServiceBatchERR struct for SpecialServiceBatchERR
type SpecialServiceBatchERR struct {
	// >- These parameters are required to set for the special service, such as an Insurance value or a Receipt-number format. This is applicable only when Special Service requires input parameters. If a Special Service does not require input parameters, user can or pass an empty array.
	InputParameters []Parameter `json:"inputParameters,omitempty"`
	// A unique identifier associated with the special service which varies based on selected USPS Service and ParcelTypes/PackageTypes.
	SpecialserviceId string `json:"specialserviceId"`
}

type _SpecialServiceBatchERR SpecialServiceBatchERR

// NewSpecialServiceBatchERR instantiates a new SpecialServiceBatchERR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialServiceBatchERR(specialserviceId string) *SpecialServiceBatchERR {
	this := SpecialServiceBatchERR{}
	this.SpecialserviceId = specialserviceId
	return &this
}

// NewSpecialServiceBatchERRWithDefaults instantiates a new SpecialServiceBatchERR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialServiceBatchERRWithDefaults() *SpecialServiceBatchERR {
	this := SpecialServiceBatchERR{}
	return &this
}

// GetInputParameters returns the InputParameters field value if set, zero value otherwise.
func (o *SpecialServiceBatchERR) GetInputParameters() []Parameter {
	if o == nil || IsNil(o.InputParameters) {
		var ret []Parameter
		return ret
	}
	return o.InputParameters
}

// GetInputParametersOk returns a tuple with the InputParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServiceBatchERR) GetInputParametersOk() ([]Parameter, bool) {
	if o == nil || IsNil(o.InputParameters) {
		return nil, false
	}
	return o.InputParameters, true
}

// HasInputParameters returns a boolean if a field has been set.
func (o *SpecialServiceBatchERR) HasInputParameters() bool {
	if o != nil && !IsNil(o.InputParameters) {
		return true
	}

	return false
}

// SetInputParameters gets a reference to the given []Parameter and assigns it to the InputParameters field.
func (o *SpecialServiceBatchERR) SetInputParameters(v []Parameter) {
	o.InputParameters = v
}

// GetSpecialserviceId returns the SpecialserviceId field value
func (o *SpecialServiceBatchERR) GetSpecialserviceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpecialserviceId
}

// GetSpecialserviceIdOk returns a tuple with the SpecialserviceId field value
// and a boolean to check if the value has been set.
func (o *SpecialServiceBatchERR) GetSpecialserviceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpecialserviceId, true
}

// SetSpecialserviceId sets field value
func (o *SpecialServiceBatchERR) SetSpecialserviceId(v string) {
	o.SpecialserviceId = v
}

func (o SpecialServiceBatchERR) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecialServiceBatchERR) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InputParameters) {
		toSerialize["inputParameters"] = o.InputParameters
	}
	toSerialize["specialserviceId"] = o.SpecialserviceId
	return toSerialize, nil
}

func (o *SpecialServiceBatchERR) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"specialserviceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpecialServiceBatchERR := _SpecialServiceBatchERR{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpecialServiceBatchERR)

	if err != nil {
		return err
	}

	*o = SpecialServiceBatchERR(varSpecialServiceBatchERR)

	return err
}

type NullableSpecialServiceBatchERR struct {
	value *SpecialServiceBatchERR
	isSet bool
}

func (v NullableSpecialServiceBatchERR) Get() *SpecialServiceBatchERR {
	return v.value
}

func (v *NullableSpecialServiceBatchERR) Set(val *SpecialServiceBatchERR) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialServiceBatchERR) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialServiceBatchERR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialServiceBatchERR(val *SpecialServiceBatchERR) *NullableSpecialServiceBatchERR {
	return &NullableSpecialServiceBatchERR{value: val, isSet: true}
}

func (v NullableSpecialServiceBatchERR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialServiceBatchERR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


