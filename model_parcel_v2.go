/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParcelV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParcelV2{}

// ParcelV2 The details of the Parcel.
type ParcelV2 struct {
	// Length is always the greatest of the three dimensions. The other two dimensions are used in the calculation of the girth.
	Length *float32 `json:"length,omitempty"`
	// There is no strict rule as to which element is the width or the height, but the width is the second greatest dimension of a parcel by convention.
	Width *float32 `json:"width,omitempty"`
	// By convention the height is the smallest dimension of the parcel.
	Height *float32 `json:"height,omitempty"`
	// DimUnit is a standard for measuring the physical quantities of specified dimension parameters.<br /> The valid values are: Inch and Centimeter.
	DimUnit *string `json:"dimUnit,omitempty"`
	// WeightUnit is a standard for measuring the physical quantities of specified weight.<br /> The valid values are: Ounces and Grams.<br /> For USPS shipments, set this to OZ.
	WeightUnit string `json:"weightUnit"`
	// Weight measures the heaviness of an object (how heavy an object is) .
	Weight *float32 `json:"weight,omitempty"`
	// Indicates value of the package.
	PackageValue *float32 `json:"packageValue,omitempty"`
}

type _ParcelV2 ParcelV2

// NewParcelV2 instantiates a new ParcelV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParcelV2(weightUnit string) *ParcelV2 {
	this := ParcelV2{}
	this.WeightUnit = weightUnit
	return &this
}

// NewParcelV2WithDefaults instantiates a new ParcelV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParcelV2WithDefaults() *ParcelV2 {
	this := ParcelV2{}
	return &this
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *ParcelV2) GetLength() float32 {
	if o == nil || IsNil(o.Length) {
		var ret float32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetLengthOk() (*float32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *ParcelV2) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given float32 and assigns it to the Length field.
func (o *ParcelV2) SetLength(v float32) {
	o.Length = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ParcelV2) GetWidth() float32 {
	if o == nil || IsNil(o.Width) {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetWidthOk() (*float32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ParcelV2) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *ParcelV2) SetWidth(v float32) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ParcelV2) GetHeight() float32 {
	if o == nil || IsNil(o.Height) {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetHeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ParcelV2) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *ParcelV2) SetHeight(v float32) {
	o.Height = &v
}

// GetDimUnit returns the DimUnit field value if set, zero value otherwise.
func (o *ParcelV2) GetDimUnit() string {
	if o == nil || IsNil(o.DimUnit) {
		var ret string
		return ret
	}
	return *o.DimUnit
}

// GetDimUnitOk returns a tuple with the DimUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetDimUnitOk() (*string, bool) {
	if o == nil || IsNil(o.DimUnit) {
		return nil, false
	}
	return o.DimUnit, true
}

// HasDimUnit returns a boolean if a field has been set.
func (o *ParcelV2) HasDimUnit() bool {
	if o != nil && !IsNil(o.DimUnit) {
		return true
	}

	return false
}

// SetDimUnit gets a reference to the given string and assigns it to the DimUnit field.
func (o *ParcelV2) SetDimUnit(v string) {
	o.DimUnit = &v
}

// GetWeightUnit returns the WeightUnit field value
func (o *ParcelV2) GetWeightUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WeightUnit
}

// GetWeightUnitOk returns a tuple with the WeightUnit field value
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetWeightUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeightUnit, true
}

// SetWeightUnit sets field value
func (o *ParcelV2) SetWeightUnit(v string) {
	o.WeightUnit = v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *ParcelV2) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *ParcelV2) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *ParcelV2) SetWeight(v float32) {
	o.Weight = &v
}

// GetPackageValue returns the PackageValue field value if set, zero value otherwise.
func (o *ParcelV2) GetPackageValue() float32 {
	if o == nil || IsNil(o.PackageValue) {
		var ret float32
		return ret
	}
	return *o.PackageValue
}

// GetPackageValueOk returns a tuple with the PackageValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParcelV2) GetPackageValueOk() (*float32, bool) {
	if o == nil || IsNil(o.PackageValue) {
		return nil, false
	}
	return o.PackageValue, true
}

// HasPackageValue returns a boolean if a field has been set.
func (o *ParcelV2) HasPackageValue() bool {
	if o != nil && !IsNil(o.PackageValue) {
		return true
	}

	return false
}

// SetPackageValue gets a reference to the given float32 and assigns it to the PackageValue field.
func (o *ParcelV2) SetPackageValue(v float32) {
	o.PackageValue = &v
}

func (o ParcelV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParcelV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.DimUnit) {
		toSerialize["dimUnit"] = o.DimUnit
	}
	toSerialize["weightUnit"] = o.WeightUnit
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if !IsNil(o.PackageValue) {
		toSerialize["packageValue"] = o.PackageValue
	}
	return toSerialize, nil
}

func (o *ParcelV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"weightUnit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParcelV2 := _ParcelV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParcelV2)

	if err != nil {
		return err
	}

	*o = ParcelV2(varParcelV2)

	return err
}

type NullableParcelV2 struct {
	value *ParcelV2
	isSet bool
}

func (v NullableParcelV2) Get() *ParcelV2 {
	return v.value
}

func (v *NullableParcelV2) Set(val *ParcelV2) {
	v.value = val
	v.isSet = true
}

func (v NullableParcelV2) IsSet() bool {
	return v.isSet
}

func (v *NullableParcelV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParcelV2(val *ParcelV2) *NullableParcelV2 {
	return &NullableParcelV2{value: val, isSet: true}
}

func (v NullableParcelV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParcelV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


