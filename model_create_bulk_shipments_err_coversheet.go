/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateBulkShipmentsERRCoversheet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBulkShipmentsERRCoversheet{}

// CreateBulkShipmentsERRCoversheet This ShipmentBatch contains the schema information for ERR Coversheet.
type CreateBulkShipmentsERRCoversheet struct {
	// Name of the of ERR Batch which consists of multiple shipments (shipments in bulk) for Coversheet printing., e.g. ERR-Coversheet07.
	Name string `json:"name"`
	// Indicates the name of the group of batches, which consists of multiple Batch groups.
	GroupName *string `json:"groupName,omitempty"`
	// This indicates the envelope size of the ERR Bulk Shipment, i.e., DocSize. We have indicated the example values in enum.
	Size string `json:"size"`
	// This indicates the type of the ERR Batch Shipment, e.g., Coversheet.
	Type string `json:"type"`
	// This defines the format type of the shipment which is printed. For example Coversheet prints in PDF form.
	Format *string `json:"format,omitempty"`
	// The unique identifier associated with the user's registered USPS Account which will be required for this batch. User can override this value by defining it at Shipment level.
	CarrierAccountId string `json:"carrierAccountId"`
	// Parcel Type is required for creating a shipment while rating a parcel. And it varies as per USPS selected services, e.g. LTR, LGENV. User can override this value by defining it at shipment level.
	ParcelType string `json:"parcelType"`
	// A unique identifier given  to the carrier-specific service which is used for this BulkShipment. User can override this value by defining it at shipment level.
	ServiceId string `json:"serviceId"`
	SpecialServices []SpecialServiceERRInner `json:"specialServices,omitempty"`
	Shipments []ShipmentERRCoversheet `json:"shipments"`
}

type _CreateBulkShipmentsERRCoversheet CreateBulkShipmentsERRCoversheet

// NewCreateBulkShipmentsERRCoversheet instantiates a new CreateBulkShipmentsERRCoversheet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBulkShipmentsERRCoversheet(name string, size string, type_ string, carrierAccountId string, parcelType string, serviceId string, shipments []ShipmentERRCoversheet) *CreateBulkShipmentsERRCoversheet {
	this := CreateBulkShipmentsERRCoversheet{}
	this.Name = name
	this.Size = size
	this.Type = type_
	this.CarrierAccountId = carrierAccountId
	this.ParcelType = parcelType
	this.ServiceId = serviceId
	this.Shipments = shipments
	return &this
}

// NewCreateBulkShipmentsERRCoversheetWithDefaults instantiates a new CreateBulkShipmentsERRCoversheet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBulkShipmentsERRCoversheetWithDefaults() *CreateBulkShipmentsERRCoversheet {
	this := CreateBulkShipmentsERRCoversheet{}
	return &this
}

// GetName returns the Name field value
func (o *CreateBulkShipmentsERRCoversheet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateBulkShipmentsERRCoversheet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateBulkShipmentsERRCoversheet) SetName(v string) {
	o.Name = v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *CreateBulkShipmentsERRCoversheet) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBulkShipmentsERRCoversheet) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *CreateBulkShipmentsERRCoversheet) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *CreateBulkShipmentsERRCoversheet) SetGroupName(v string) {
	o.GroupName = &v
}

// GetSize returns the Size field value
func (o *CreateBulkShipmentsERRCoversheet) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *CreateBulkShipmentsERRCoversheet) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *CreateBulkShipmentsERRCoversheet) SetSize(v string) {
	o.Size = v
}

// GetType returns the Type field value
func (o *CreateBulkShipmentsERRCoversheet) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateBulkShipmentsERRCoversheet) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateBulkShipmentsERRCoversheet) SetType(v string) {
	o.Type = v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *CreateBulkShipmentsERRCoversheet) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBulkShipmentsERRCoversheet) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *CreateBulkShipmentsERRCoversheet) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *CreateBulkShipmentsERRCoversheet) SetFormat(v string) {
	o.Format = &v
}

// GetCarrierAccountId returns the CarrierAccountId field value
func (o *CreateBulkShipmentsERRCoversheet) GetCarrierAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CarrierAccountId
}

// GetCarrierAccountIdOk returns a tuple with the CarrierAccountId field value
// and a boolean to check if the value has been set.
func (o *CreateBulkShipmentsERRCoversheet) GetCarrierAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CarrierAccountId, true
}

// SetCarrierAccountId sets field value
func (o *CreateBulkShipmentsERRCoversheet) SetCarrierAccountId(v string) {
	o.CarrierAccountId = v
}

// GetParcelType returns the ParcelType field value
func (o *CreateBulkShipmentsERRCoversheet) GetParcelType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParcelType
}

// GetParcelTypeOk returns a tuple with the ParcelType field value
// and a boolean to check if the value has been set.
func (o *CreateBulkShipmentsERRCoversheet) GetParcelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParcelType, true
}

// SetParcelType sets field value
func (o *CreateBulkShipmentsERRCoversheet) SetParcelType(v string) {
	o.ParcelType = v
}

// GetServiceId returns the ServiceId field value
func (o *CreateBulkShipmentsERRCoversheet) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *CreateBulkShipmentsERRCoversheet) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *CreateBulkShipmentsERRCoversheet) SetServiceId(v string) {
	o.ServiceId = v
}

// GetSpecialServices returns the SpecialServices field value if set, zero value otherwise.
func (o *CreateBulkShipmentsERRCoversheet) GetSpecialServices() []SpecialServiceERRInner {
	if o == nil || IsNil(o.SpecialServices) {
		var ret []SpecialServiceERRInner
		return ret
	}
	return o.SpecialServices
}

// GetSpecialServicesOk returns a tuple with the SpecialServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBulkShipmentsERRCoversheet) GetSpecialServicesOk() ([]SpecialServiceERRInner, bool) {
	if o == nil || IsNil(o.SpecialServices) {
		return nil, false
	}
	return o.SpecialServices, true
}

// HasSpecialServices returns a boolean if a field has been set.
func (o *CreateBulkShipmentsERRCoversheet) HasSpecialServices() bool {
	if o != nil && !IsNil(o.SpecialServices) {
		return true
	}

	return false
}

// SetSpecialServices gets a reference to the given []SpecialServiceERRInner and assigns it to the SpecialServices field.
func (o *CreateBulkShipmentsERRCoversheet) SetSpecialServices(v []SpecialServiceERRInner) {
	o.SpecialServices = v
}

// GetShipments returns the Shipments field value
func (o *CreateBulkShipmentsERRCoversheet) GetShipments() []ShipmentERRCoversheet {
	if o == nil {
		var ret []ShipmentERRCoversheet
		return ret
	}

	return o.Shipments
}

// GetShipmentsOk returns a tuple with the Shipments field value
// and a boolean to check if the value has been set.
func (o *CreateBulkShipmentsERRCoversheet) GetShipmentsOk() ([]ShipmentERRCoversheet, bool) {
	if o == nil {
		return nil, false
	}
	return o.Shipments, true
}

// SetShipments sets field value
func (o *CreateBulkShipmentsERRCoversheet) SetShipments(v []ShipmentERRCoversheet) {
	o.Shipments = v
}

func (o CreateBulkShipmentsERRCoversheet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBulkShipmentsERRCoversheet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	toSerialize["size"] = o.Size
	toSerialize["type"] = o.Type
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	toSerialize["carrierAccountId"] = o.CarrierAccountId
	toSerialize["parcelType"] = o.ParcelType
	toSerialize["serviceId"] = o.ServiceId
	if !IsNil(o.SpecialServices) {
		toSerialize["specialServices"] = o.SpecialServices
	}
	toSerialize["shipments"] = o.Shipments
	return toSerialize, nil
}

func (o *CreateBulkShipmentsERRCoversheet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"size",
		"type",
		"carrierAccountId",
		"parcelType",
		"serviceId",
		"shipments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateBulkShipmentsERRCoversheet := _CreateBulkShipmentsERRCoversheet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateBulkShipmentsERRCoversheet)

	if err != nil {
		return err
	}

	*o = CreateBulkShipmentsERRCoversheet(varCreateBulkShipmentsERRCoversheet)

	return err
}

type NullableCreateBulkShipmentsERRCoversheet struct {
	value *CreateBulkShipmentsERRCoversheet
	isSet bool
}

func (v NullableCreateBulkShipmentsERRCoversheet) Get() *CreateBulkShipmentsERRCoversheet {
	return v.value
}

func (v *NullableCreateBulkShipmentsERRCoversheet) Set(val *CreateBulkShipmentsERRCoversheet) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBulkShipmentsERRCoversheet) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBulkShipmentsERRCoversheet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBulkShipmentsERRCoversheet(val *CreateBulkShipmentsERRCoversheet) *NullableCreateBulkShipmentsERRCoversheet {
	return &NullableCreateBulkShipmentsERRCoversheet{value: val, isSet: true}
}

func (v NullableCreateBulkShipmentsERRCoversheet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBulkShipmentsERRCoversheet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


