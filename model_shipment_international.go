/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ShipmentInternational type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShipmentInternational{}

// ShipmentInternational struct for ShipmentInternational
type ShipmentInternational struct {
	FromAddress ShipmentInternationalFromAddress `json:"fromAddress"`
	Parcel ShipmentInternationalParcel `json:"parcel"`
	// A unique identifier associated with the Carrier account used by client users during shipment process.
	CarrierAccountId string `json:"carrierAccountId"`
	// >-Packaging type specific to the carrier, e.g., FRPKG, LGENV, TUBE,PKG.
	ParcelType string `json:"parcelType"`
	// >-The abbreviated name of the carrier-specific service. Required for creating a shipment. Optional for rating a parcel.
	ServiceId string `json:"serviceId"`
	// The date of the shipment. The format must be YYY:MM:DD.
	DateOfShipment *string `json:"dateOfShipment,omitempty"`
	SpecialServices []SpecialService `json:"specialServices,omitempty"`
	ShipmentOptions *ShipmentOptions `json:"shipmentOptions,omitempty"`
	// Additional metadata that needs to be stored for this shipment can be added here. For now, `costAccountName` is supported.
	Metadata []ShipmentInternationalMetadataInner `json:"metadata,omitempty"`
	ToAddress ShipmentInternationalToAddress `json:"toAddress"`
	Customs ShipmentInternationalCustoms `json:"customs"`
}

type _ShipmentInternational ShipmentInternational

// NewShipmentInternational instantiates a new ShipmentInternational object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShipmentInternational(fromAddress ShipmentInternationalFromAddress, parcel ShipmentInternationalParcel, carrierAccountId string, parcelType string, serviceId string, toAddress ShipmentInternationalToAddress, customs ShipmentInternationalCustoms) *ShipmentInternational {
	this := ShipmentInternational{}
	this.FromAddress = fromAddress
	this.Parcel = parcel
	this.CarrierAccountId = carrierAccountId
	this.ParcelType = parcelType
	this.ServiceId = serviceId
	this.ToAddress = toAddress
	this.Customs = customs
	return &this
}

// NewShipmentInternationalWithDefaults instantiates a new ShipmentInternational object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShipmentInternationalWithDefaults() *ShipmentInternational {
	this := ShipmentInternational{}
	return &this
}

// GetFromAddress returns the FromAddress field value
func (o *ShipmentInternational) GetFromAddress() ShipmentInternationalFromAddress {
	if o == nil {
		var ret ShipmentInternationalFromAddress
		return ret
	}

	return o.FromAddress
}

// GetFromAddressOk returns a tuple with the FromAddress field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetFromAddressOk() (*ShipmentInternationalFromAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromAddress, true
}

// SetFromAddress sets field value
func (o *ShipmentInternational) SetFromAddress(v ShipmentInternationalFromAddress) {
	o.FromAddress = v
}

// GetParcel returns the Parcel field value
func (o *ShipmentInternational) GetParcel() ShipmentInternationalParcel {
	if o == nil {
		var ret ShipmentInternationalParcel
		return ret
	}

	return o.Parcel
}

// GetParcelOk returns a tuple with the Parcel field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetParcelOk() (*ShipmentInternationalParcel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parcel, true
}

// SetParcel sets field value
func (o *ShipmentInternational) SetParcel(v ShipmentInternationalParcel) {
	o.Parcel = v
}

// GetCarrierAccountId returns the CarrierAccountId field value
func (o *ShipmentInternational) GetCarrierAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CarrierAccountId
}

// GetCarrierAccountIdOk returns a tuple with the CarrierAccountId field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetCarrierAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CarrierAccountId, true
}

// SetCarrierAccountId sets field value
func (o *ShipmentInternational) SetCarrierAccountId(v string) {
	o.CarrierAccountId = v
}

// GetParcelType returns the ParcelType field value
func (o *ShipmentInternational) GetParcelType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ParcelType
}

// GetParcelTypeOk returns a tuple with the ParcelType field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetParcelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParcelType, true
}

// SetParcelType sets field value
func (o *ShipmentInternational) SetParcelType(v string) {
	o.ParcelType = v
}

// GetServiceId returns the ServiceId field value
func (o *ShipmentInternational) GetServiceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetServiceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceId, true
}

// SetServiceId sets field value
func (o *ShipmentInternational) SetServiceId(v string) {
	o.ServiceId = v
}

// GetDateOfShipment returns the DateOfShipment field value if set, zero value otherwise.
func (o *ShipmentInternational) GetDateOfShipment() string {
	if o == nil || IsNil(o.DateOfShipment) {
		var ret string
		return ret
	}
	return *o.DateOfShipment
}

// GetDateOfShipmentOk returns a tuple with the DateOfShipment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetDateOfShipmentOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfShipment) {
		return nil, false
	}
	return o.DateOfShipment, true
}

// HasDateOfShipment returns a boolean if a field has been set.
func (o *ShipmentInternational) HasDateOfShipment() bool {
	if o != nil && !IsNil(o.DateOfShipment) {
		return true
	}

	return false
}

// SetDateOfShipment gets a reference to the given string and assigns it to the DateOfShipment field.
func (o *ShipmentInternational) SetDateOfShipment(v string) {
	o.DateOfShipment = &v
}

// GetSpecialServices returns the SpecialServices field value if set, zero value otherwise.
func (o *ShipmentInternational) GetSpecialServices() []SpecialService {
	if o == nil || IsNil(o.SpecialServices) {
		var ret []SpecialService
		return ret
	}
	return o.SpecialServices
}

// GetSpecialServicesOk returns a tuple with the SpecialServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetSpecialServicesOk() ([]SpecialService, bool) {
	if o == nil || IsNil(o.SpecialServices) {
		return nil, false
	}
	return o.SpecialServices, true
}

// HasSpecialServices returns a boolean if a field has been set.
func (o *ShipmentInternational) HasSpecialServices() bool {
	if o != nil && !IsNil(o.SpecialServices) {
		return true
	}

	return false
}

// SetSpecialServices gets a reference to the given []SpecialService and assigns it to the SpecialServices field.
func (o *ShipmentInternational) SetSpecialServices(v []SpecialService) {
	o.SpecialServices = v
}

// GetShipmentOptions returns the ShipmentOptions field value if set, zero value otherwise.
func (o *ShipmentInternational) GetShipmentOptions() ShipmentOptions {
	if o == nil || IsNil(o.ShipmentOptions) {
		var ret ShipmentOptions
		return ret
	}
	return *o.ShipmentOptions
}

// GetShipmentOptionsOk returns a tuple with the ShipmentOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetShipmentOptionsOk() (*ShipmentOptions, bool) {
	if o == nil || IsNil(o.ShipmentOptions) {
		return nil, false
	}
	return o.ShipmentOptions, true
}

// HasShipmentOptions returns a boolean if a field has been set.
func (o *ShipmentInternational) HasShipmentOptions() bool {
	if o != nil && !IsNil(o.ShipmentOptions) {
		return true
	}

	return false
}

// SetShipmentOptions gets a reference to the given ShipmentOptions and assigns it to the ShipmentOptions field.
func (o *ShipmentInternational) SetShipmentOptions(v ShipmentOptions) {
	o.ShipmentOptions = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ShipmentInternational) GetMetadata() []ShipmentInternationalMetadataInner {
	if o == nil || IsNil(o.Metadata) {
		var ret []ShipmentInternationalMetadataInner
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetMetadataOk() ([]ShipmentInternationalMetadataInner, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ShipmentInternational) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []ShipmentInternationalMetadataInner and assigns it to the Metadata field.
func (o *ShipmentInternational) SetMetadata(v []ShipmentInternationalMetadataInner) {
	o.Metadata = v
}

// GetToAddress returns the ToAddress field value
func (o *ShipmentInternational) GetToAddress() ShipmentInternationalToAddress {
	if o == nil {
		var ret ShipmentInternationalToAddress
		return ret
	}

	return o.ToAddress
}

// GetToAddressOk returns a tuple with the ToAddress field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetToAddressOk() (*ShipmentInternationalToAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToAddress, true
}

// SetToAddress sets field value
func (o *ShipmentInternational) SetToAddress(v ShipmentInternationalToAddress) {
	o.ToAddress = v
}

// GetCustoms returns the Customs field value
func (o *ShipmentInternational) GetCustoms() ShipmentInternationalCustoms {
	if o == nil {
		var ret ShipmentInternationalCustoms
		return ret
	}

	return o.Customs
}

// GetCustomsOk returns a tuple with the Customs field value
// and a boolean to check if the value has been set.
func (o *ShipmentInternational) GetCustomsOk() (*ShipmentInternationalCustoms, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Customs, true
}

// SetCustoms sets field value
func (o *ShipmentInternational) SetCustoms(v ShipmentInternationalCustoms) {
	o.Customs = v
}

func (o ShipmentInternational) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShipmentInternational) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromAddress"] = o.FromAddress
	toSerialize["parcel"] = o.Parcel
	toSerialize["carrierAccountId"] = o.CarrierAccountId
	toSerialize["parcelType"] = o.ParcelType
	toSerialize["serviceId"] = o.ServiceId
	if !IsNil(o.DateOfShipment) {
		toSerialize["dateOfShipment"] = o.DateOfShipment
	}
	if !IsNil(o.SpecialServices) {
		toSerialize["specialServices"] = o.SpecialServices
	}
	if !IsNil(o.ShipmentOptions) {
		toSerialize["shipmentOptions"] = o.ShipmentOptions
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["toAddress"] = o.ToAddress
	toSerialize["customs"] = o.Customs
	return toSerialize, nil
}

func (o *ShipmentInternational) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromAddress",
		"parcel",
		"carrierAccountId",
		"parcelType",
		"serviceId",
		"toAddress",
		"customs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShipmentInternational := _ShipmentInternational{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShipmentInternational)

	if err != nil {
		return err
	}

	*o = ShipmentInternational(varShipmentInternational)

	return err
}

type NullableShipmentInternational struct {
	value *ShipmentInternational
	isSet bool
}

func (v NullableShipmentInternational) Get() *ShipmentInternational {
	return v.value
}

func (v *NullableShipmentInternational) Set(val *ShipmentInternational) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentInternational) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentInternational) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentInternational(val *ShipmentInternational) *NullableShipmentInternational {
	return &NullableShipmentInternational{value: val, isSet: true}
}

func (v NullableShipmentInternational) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentInternational) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


