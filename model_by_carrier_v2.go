/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ByCarrierV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ByCarrierV2{}

// ByCarrierV2 The shipment is grouped by Carrier and their Service.
type ByCarrierV2 struct {
	// This is a unique identifier associated with the specific sub-carrier account, which must be valid.<br /> This is used in the shipment creation (if this value is defined, Carrier properties will be skipped).
	CarrierAccountId string `json:"carrierAccountId"`
	// A unique identifier associated with the specific carrier, i.e. CarrierID, which must be valid.
	Carrier string `json:"carrier"`
	// Indicates a unique identifier associated with the carrier specific service, which is ServiceID, which must be valid.
	Service string `json:"service"`
}

type _ByCarrierV2 ByCarrierV2

// NewByCarrierV2 instantiates a new ByCarrierV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewByCarrierV2(carrierAccountId string, carrier string, service string) *ByCarrierV2 {
	this := ByCarrierV2{}
	this.CarrierAccountId = carrierAccountId
	this.Carrier = carrier
	this.Service = service
	return &this
}

// NewByCarrierV2WithDefaults instantiates a new ByCarrierV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewByCarrierV2WithDefaults() *ByCarrierV2 {
	this := ByCarrierV2{}
	return &this
}

// GetCarrierAccountId returns the CarrierAccountId field value
func (o *ByCarrierV2) GetCarrierAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CarrierAccountId
}

// GetCarrierAccountIdOk returns a tuple with the CarrierAccountId field value
// and a boolean to check if the value has been set.
func (o *ByCarrierV2) GetCarrierAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CarrierAccountId, true
}

// SetCarrierAccountId sets field value
func (o *ByCarrierV2) SetCarrierAccountId(v string) {
	o.CarrierAccountId = v
}

// GetCarrier returns the Carrier field value
func (o *ByCarrierV2) GetCarrier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Carrier
}

// GetCarrierOk returns a tuple with the Carrier field value
// and a boolean to check if the value has been set.
func (o *ByCarrierV2) GetCarrierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Carrier, true
}

// SetCarrier sets field value
func (o *ByCarrierV2) SetCarrier(v string) {
	o.Carrier = v
}

// GetService returns the Service field value
func (o *ByCarrierV2) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *ByCarrierV2) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *ByCarrierV2) SetService(v string) {
	o.Service = v
}

func (o ByCarrierV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ByCarrierV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["carrierAccountId"] = o.CarrierAccountId
	toSerialize["carrier"] = o.Carrier
	toSerialize["service"] = o.Service
	return toSerialize, nil
}

func (o *ByCarrierV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"carrierAccountId",
		"carrier",
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varByCarrierV2 := _ByCarrierV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varByCarrierV2)

	if err != nil {
		return err
	}

	*o = ByCarrierV2(varByCarrierV2)

	return err
}

type NullableByCarrierV2 struct {
	value *ByCarrierV2
	isSet bool
}

func (v NullableByCarrierV2) Get() *ByCarrierV2 {
	return v.value
}

func (v *NullableByCarrierV2) Set(val *ByCarrierV2) {
	v.value = val
	v.isSet = true
}

func (v NullableByCarrierV2) IsSet() bool {
	return v.isSet
}

func (v *NullableByCarrierV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableByCarrierV2(val *ByCarrierV2) *NullableByCarrierV2 {
	return &NullableByCarrierV2{value: val, isSet: true}
}

func (v NullableByCarrierV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableByCarrierV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


