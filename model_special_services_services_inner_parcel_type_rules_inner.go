/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
)

// checks if the SpecialServicesServicesInnerParcelTypeRulesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecialServicesServicesInnerParcelTypeRulesInner{}

// SpecialServicesServicesInnerParcelTypeRulesInner struct for SpecialServicesServicesInnerParcelTypeRulesInner
type SpecialServicesServicesInnerParcelTypeRulesInner struct {
	// The branded name of Parcel Type
	BrandedName *string `json:"brandedName,omitempty"`
	// Parcel Type is required for creating a shipment while rating a parcel, which varies as per Carrier selection. Here, it reflects as per the defined ParcelType Rules. ParcelType have categories like Package, Envelopes, Paks, Boxes, Tube, etc. 
	ParcelType *string `json:"parcelType,omitempty"`
	// Whether this parcel type is trackable. Valid Values are: TRACKABLE, NON_TRACKABLE, REQUIRES_TRACKABLE_SPECIAL_SERVICE
	Trackable *string `json:"trackable,omitempty"`
	// If trackable is set to REQUIRES_TRACKABLE_SPECIAL_SERVICE, this is a free or low-cost special service that allows the shipper to track the shipment.
	SuggestedTrackableSpecialService *string `json:"suggestedTrackableSpecialService,omitempty"`
	// It displays all the available special services, their details and prerequisites and/or incompatible details with other special services
	SpecialServiceRules []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner `json:"specialServiceRules,omitempty"`
}

// NewSpecialServicesServicesInnerParcelTypeRulesInner instantiates a new SpecialServicesServicesInnerParcelTypeRulesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialServicesServicesInnerParcelTypeRulesInner() *SpecialServicesServicesInnerParcelTypeRulesInner {
	this := SpecialServicesServicesInnerParcelTypeRulesInner{}
	return &this
}

// NewSpecialServicesServicesInnerParcelTypeRulesInnerWithDefaults instantiates a new SpecialServicesServicesInnerParcelTypeRulesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialServicesServicesInnerParcelTypeRulesInnerWithDefaults() *SpecialServicesServicesInnerParcelTypeRulesInner {
	this := SpecialServicesServicesInnerParcelTypeRulesInner{}
	return &this
}

// GetBrandedName returns the BrandedName field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) GetBrandedName() string {
	if o == nil || IsNil(o.BrandedName) {
		var ret string
		return ret
	}
	return *o.BrandedName
}

// GetBrandedNameOk returns a tuple with the BrandedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) GetBrandedNameOk() (*string, bool) {
	if o == nil || IsNil(o.BrandedName) {
		return nil, false
	}
	return o.BrandedName, true
}

// HasBrandedName returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) HasBrandedName() bool {
	if o != nil && !IsNil(o.BrandedName) {
		return true
	}

	return false
}

// SetBrandedName gets a reference to the given string and assigns it to the BrandedName field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) SetBrandedName(v string) {
	o.BrandedName = &v
}

// GetParcelType returns the ParcelType field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) GetParcelType() string {
	if o == nil || IsNil(o.ParcelType) {
		var ret string
		return ret
	}
	return *o.ParcelType
}

// GetParcelTypeOk returns a tuple with the ParcelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) GetParcelTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ParcelType) {
		return nil, false
	}
	return o.ParcelType, true
}

// HasParcelType returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) HasParcelType() bool {
	if o != nil && !IsNil(o.ParcelType) {
		return true
	}

	return false
}

// SetParcelType gets a reference to the given string and assigns it to the ParcelType field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) SetParcelType(v string) {
	o.ParcelType = &v
}

// GetTrackable returns the Trackable field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) GetTrackable() string {
	if o == nil || IsNil(o.Trackable) {
		var ret string
		return ret
	}
	return *o.Trackable
}

// GetTrackableOk returns a tuple with the Trackable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) GetTrackableOk() (*string, bool) {
	if o == nil || IsNil(o.Trackable) {
		return nil, false
	}
	return o.Trackable, true
}

// HasTrackable returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) HasTrackable() bool {
	if o != nil && !IsNil(o.Trackable) {
		return true
	}

	return false
}

// SetTrackable gets a reference to the given string and assigns it to the Trackable field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) SetTrackable(v string) {
	o.Trackable = &v
}

// GetSuggestedTrackableSpecialService returns the SuggestedTrackableSpecialService field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) GetSuggestedTrackableSpecialService() string {
	if o == nil || IsNil(o.SuggestedTrackableSpecialService) {
		var ret string
		return ret
	}
	return *o.SuggestedTrackableSpecialService
}

// GetSuggestedTrackableSpecialServiceOk returns a tuple with the SuggestedTrackableSpecialService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) GetSuggestedTrackableSpecialServiceOk() (*string, bool) {
	if o == nil || IsNil(o.SuggestedTrackableSpecialService) {
		return nil, false
	}
	return o.SuggestedTrackableSpecialService, true
}

// HasSuggestedTrackableSpecialService returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) HasSuggestedTrackableSpecialService() bool {
	if o != nil && !IsNil(o.SuggestedTrackableSpecialService) {
		return true
	}

	return false
}

// SetSuggestedTrackableSpecialService gets a reference to the given string and assigns it to the SuggestedTrackableSpecialService field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) SetSuggestedTrackableSpecialService(v string) {
	o.SuggestedTrackableSpecialService = &v
}

// GetSpecialServiceRules returns the SpecialServiceRules field value if set, zero value otherwise.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) GetSpecialServiceRules() []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner {
	if o == nil || IsNil(o.SpecialServiceRules) {
		var ret []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner
		return ret
	}
	return o.SpecialServiceRules
}

// GetSpecialServiceRulesOk returns a tuple with the SpecialServiceRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) GetSpecialServiceRulesOk() ([]SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner, bool) {
	if o == nil || IsNil(o.SpecialServiceRules) {
		return nil, false
	}
	return o.SpecialServiceRules, true
}

// HasSpecialServiceRules returns a boolean if a field has been set.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) HasSpecialServiceRules() bool {
	if o != nil && !IsNil(o.SpecialServiceRules) {
		return true
	}

	return false
}

// SetSpecialServiceRules gets a reference to the given []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner and assigns it to the SpecialServiceRules field.
func (o *SpecialServicesServicesInnerParcelTypeRulesInner) SetSpecialServiceRules(v []SpecialServicesServicesInnerParcelTypeRulesInnerSpecialServiceRulesInner) {
	o.SpecialServiceRules = v
}

func (o SpecialServicesServicesInnerParcelTypeRulesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecialServicesServicesInnerParcelTypeRulesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BrandedName) {
		toSerialize["brandedName"] = o.BrandedName
	}
	if !IsNil(o.ParcelType) {
		toSerialize["parcelType"] = o.ParcelType
	}
	if !IsNil(o.Trackable) {
		toSerialize["trackable"] = o.Trackable
	}
	if !IsNil(o.SuggestedTrackableSpecialService) {
		toSerialize["suggestedTrackableSpecialService"] = o.SuggestedTrackableSpecialService
	}
	if !IsNil(o.SpecialServiceRules) {
		toSerialize["specialServiceRules"] = o.SpecialServiceRules
	}
	return toSerialize, nil
}

type NullableSpecialServicesServicesInnerParcelTypeRulesInner struct {
	value *SpecialServicesServicesInnerParcelTypeRulesInner
	isSet bool
}

func (v NullableSpecialServicesServicesInnerParcelTypeRulesInner) Get() *SpecialServicesServicesInnerParcelTypeRulesInner {
	return v.value
}

func (v *NullableSpecialServicesServicesInnerParcelTypeRulesInner) Set(val *SpecialServicesServicesInnerParcelTypeRulesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialServicesServicesInnerParcelTypeRulesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialServicesServicesInnerParcelTypeRulesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialServicesServicesInnerParcelTypeRulesInner(val *SpecialServicesServicesInnerParcelTypeRulesInner) *NullableSpecialServicesServicesInnerParcelTypeRulesInner {
	return &NullableSpecialServicesServicesInnerParcelTypeRulesInner{value: val, isSet: true}
}

func (v NullableSpecialServicesServicesInnerParcelTypeRulesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialServicesServicesInnerParcelTypeRulesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


