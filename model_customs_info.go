/*
Shipping APIs

### Introduction  The Shipping APIs include a variety of operations that allow users to manage and track their shipping requests.   Some of the key API operations available in the Shipping API includes: ### Shipment API  | Operation      | Description | | ----------- | ----------- |  | Get Carriers    | This operation fetches all onboarded carriers. Typically, user will use this service to get list of onboarded carriers and supported properties for those carriers.  |  | Get Countries | This operation fetches list of supported destination countries for a provided carrier and origin country.  |  | Get Services | This operation fetches a list of supported services for a carrier with respect to specific origin and destination country. |  | Get ParcelTypes| This operation fetches ParcelTypes based on carrier, origin and destination country. |  | Get Special Services| This operation fetches Special Services for a given carrier, service, origin and destination country. |  | Get Carrier Accounts| This operation retrieves onboarded Carriers with their Carrier Account Ids which uniquely identify multiple accounts of same carrier.  |  | Rate Shop and Get Single Rate| This API contains 2 operations, rate shop and single rate. Rate shop will fetch rates for all carrier services based on the given addresses (From and To), weight, and dimension for given parcelType. Single rate will get rate for specific service and special service (if requested) based on the given addresses (From and To), weight, and dimension, parcelType and serviceId with or without specialServices. Single rate will be used mainly to a rate a shipment before creating shipment.  |  | Create Shipment| This operation creates a new Shipment or Shipment Label. This is for both Domestic and International. | | Get All Shipments| This operation fetches all created Shipments. |  | Get Shipment by Id| Retrieves single shipment using Shipment Id. |  | Reprint Shipment| This operation reprints Shipment by the shipmentId. It retrieves an existing shipping label to reprint. The API sends the shipmentId returned by the original Created Shipment request. Use this only if the shipping label in the Create Shipment response was spoilt or lost. |  | Cancel Shipment| This operation cancels previously created shipment. |  

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package shipping

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomsInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomsInfo{}

// CustomsInfo struct for CustomsInfo
type CustomsInfo struct {
	// >-The reason the commodity is being exported. Valid values are: Valid Values : [GIFT COMMERCIAL_SAMPLE MERCHANDISE DOCUMENTS RETURNED_GOODS OTHER SOLD NOT_SOLD]
	ReasonForExport *string `json:"reasonForExport,omitempty"`
	// >-The type of currency used for the monetary values in this API request. Use three uppercase letters, per ISO 4217. For example, use USD for US Dollars, CAD for Canadian Dollars, and EUR for Euros.
	CurrencyCode string `json:"currencyCode"`
	// >- A number provided by the Automated Export System (AES). This field is required if the item is valued at more than $2,500 USD per Schedule B export codes.
	EELPFC *string `json:"EELPFC,omitempty"`
	// The certificate number associated with the commodity.
	CertificateNumber *string `json:"certificateNumber,omitempty"`
	// >-Free form comments regarding the exported shipment entered by the shipper.
	Comments *string `json:"comments,omitempty"`
	// >-Free form reference information provided by the requestor of the shipment. Depending on the carrier this information may or may not be rendered on the customs documents.
	FromCustomsReference *string `json:"fromCustomsReference,omitempty"`
	// >- A reference number used by the importer, such as a VAT number, PO number, or insured number. `Shipments to the EU` : Merchants shipping to the European Union (EU) from outside the EU must provide a VAT or IOSS number. Enter the number in this field and specify the reference type in the importerCustomsReferenceType field.
	ImporterCustomsReference *string `json:"importerCustomsReference,omitempty"`
	// The commercial invoice number assigned by the exporter. It is rquired for DHL Express
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// The export license number associated with the commodity.
	LicenseNumber *string `json:"licenseNumber,omitempty"`
	// This is declaration statement from the Shipper for the items being shipped.
	DeclarationStatement *string `json:"declarationStatement,omitempty"`
	// >-A reference type used by the importer to determine the type of importerCustomsReference. Valid Values are TAX_CODE, IMPORTER_CODE, VAT_NUMBER, IOSS_NUMBER.
	ImporterCustomsReferenceType *string `json:"importerCustomsReferenceType,omitempty"`
	// Enter the insurance fee, if applicable.
	InsuredAmount *float64 `json:"insuredAmount,omitempty"`
	// >- If the sender wishes to insure the contents, they complete an insurance receipt and affix the insured numbered label to the package. The insured number label is what this field represents.
	InsuredNumber *string `json:"insuredNumber,omitempty"`
	// >-When an international parcel is insured, the insured value must be expressed in Special Drawing Rights values. E.g. $100 USD = 66.87 SDR.
	SdrValue *float64 `json:"sdrValue,omitempty"`
	// Three-digit codes describing Terms of sale required for DHL Express shipments. Terms of sale is some sort of agreement between a buyer and seller which serves the purpose of creating uniform expectations between them. Possible values are- CFR (description- Cost and Freight), CIF (description- Cost, Insurance and Freight), CIP (description- Carriage and Insurance Paid To), DAF (description- Delivered at Frontier), DAP (description- Delivered At Place), DAT (description- Delivered At Terminal), DDP (description- Delivered Duty Paid), DDU (description- Delivered Duty Unpaid), DEQ (description- Delivery ex Quay), DES (description- Delivered ex Ship), DPU (description- Delivered At Place Unloaded), EXW (description- Ex Works), FAS (description- FAS Free Alongside Ship), FCA (description- Free Carrier), FOB (description- FOB Free On Board)
	TermsOfSale *string `json:"termsOfSale,omitempty"`
	// The tax type to choose for recipient.
	RecipientTaxType *string `json:"recipientTaxType,omitempty"`
	// The respective taxID for the taxType chosen
	RecipientTaxID *string `json:"recipientTaxID,omitempty"`
	// The tax type to choose for recipient.
	SenderTaxType *string `json:"senderTaxType,omitempty"`
	// The respective taxID for the taxType chosen
	SenderTaxID *string `json:"senderTaxID,omitempty"`
}

type _CustomsInfo CustomsInfo

// NewCustomsInfo instantiates a new CustomsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomsInfo(currencyCode string) *CustomsInfo {
	this := CustomsInfo{}
	this.CurrencyCode = currencyCode
	return &this
}

// NewCustomsInfoWithDefaults instantiates a new CustomsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomsInfoWithDefaults() *CustomsInfo {
	this := CustomsInfo{}
	return &this
}

// GetReasonForExport returns the ReasonForExport field value if set, zero value otherwise.
func (o *CustomsInfo) GetReasonForExport() string {
	if o == nil || IsNil(o.ReasonForExport) {
		var ret string
		return ret
	}
	return *o.ReasonForExport
}

// GetReasonForExportOk returns a tuple with the ReasonForExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetReasonForExportOk() (*string, bool) {
	if o == nil || IsNil(o.ReasonForExport) {
		return nil, false
	}
	return o.ReasonForExport, true
}

// HasReasonForExport returns a boolean if a field has been set.
func (o *CustomsInfo) HasReasonForExport() bool {
	if o != nil && !IsNil(o.ReasonForExport) {
		return true
	}

	return false
}

// SetReasonForExport gets a reference to the given string and assigns it to the ReasonForExport field.
func (o *CustomsInfo) SetReasonForExport(v string) {
	o.ReasonForExport = &v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *CustomsInfo) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *CustomsInfo) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetEELPFC returns the EELPFC field value if set, zero value otherwise.
func (o *CustomsInfo) GetEELPFC() string {
	if o == nil || IsNil(o.EELPFC) {
		var ret string
		return ret
	}
	return *o.EELPFC
}

// GetEELPFCOk returns a tuple with the EELPFC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetEELPFCOk() (*string, bool) {
	if o == nil || IsNil(o.EELPFC) {
		return nil, false
	}
	return o.EELPFC, true
}

// HasEELPFC returns a boolean if a field has been set.
func (o *CustomsInfo) HasEELPFC() bool {
	if o != nil && !IsNil(o.EELPFC) {
		return true
	}

	return false
}

// SetEELPFC gets a reference to the given string and assigns it to the EELPFC field.
func (o *CustomsInfo) SetEELPFC(v string) {
	o.EELPFC = &v
}

// GetCertificateNumber returns the CertificateNumber field value if set, zero value otherwise.
func (o *CustomsInfo) GetCertificateNumber() string {
	if o == nil || IsNil(o.CertificateNumber) {
		var ret string
		return ret
	}
	return *o.CertificateNumber
}

// GetCertificateNumberOk returns a tuple with the CertificateNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetCertificateNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateNumber) {
		return nil, false
	}
	return o.CertificateNumber, true
}

// HasCertificateNumber returns a boolean if a field has been set.
func (o *CustomsInfo) HasCertificateNumber() bool {
	if o != nil && !IsNil(o.CertificateNumber) {
		return true
	}

	return false
}

// SetCertificateNumber gets a reference to the given string and assigns it to the CertificateNumber field.
func (o *CustomsInfo) SetCertificateNumber(v string) {
	o.CertificateNumber = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *CustomsInfo) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *CustomsInfo) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *CustomsInfo) SetComments(v string) {
	o.Comments = &v
}

// GetFromCustomsReference returns the FromCustomsReference field value if set, zero value otherwise.
func (o *CustomsInfo) GetFromCustomsReference() string {
	if o == nil || IsNil(o.FromCustomsReference) {
		var ret string
		return ret
	}
	return *o.FromCustomsReference
}

// GetFromCustomsReferenceOk returns a tuple with the FromCustomsReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetFromCustomsReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.FromCustomsReference) {
		return nil, false
	}
	return o.FromCustomsReference, true
}

// HasFromCustomsReference returns a boolean if a field has been set.
func (o *CustomsInfo) HasFromCustomsReference() bool {
	if o != nil && !IsNil(o.FromCustomsReference) {
		return true
	}

	return false
}

// SetFromCustomsReference gets a reference to the given string and assigns it to the FromCustomsReference field.
func (o *CustomsInfo) SetFromCustomsReference(v string) {
	o.FromCustomsReference = &v
}

// GetImporterCustomsReference returns the ImporterCustomsReference field value if set, zero value otherwise.
func (o *CustomsInfo) GetImporterCustomsReference() string {
	if o == nil || IsNil(o.ImporterCustomsReference) {
		var ret string
		return ret
	}
	return *o.ImporterCustomsReference
}

// GetImporterCustomsReferenceOk returns a tuple with the ImporterCustomsReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetImporterCustomsReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.ImporterCustomsReference) {
		return nil, false
	}
	return o.ImporterCustomsReference, true
}

// HasImporterCustomsReference returns a boolean if a field has been set.
func (o *CustomsInfo) HasImporterCustomsReference() bool {
	if o != nil && !IsNil(o.ImporterCustomsReference) {
		return true
	}

	return false
}

// SetImporterCustomsReference gets a reference to the given string and assigns it to the ImporterCustomsReference field.
func (o *CustomsInfo) SetImporterCustomsReference(v string) {
	o.ImporterCustomsReference = &v
}

// GetInvoiceNumber returns the InvoiceNumber field value if set, zero value otherwise.
func (o *CustomsInfo) GetInvoiceNumber() string {
	if o == nil || IsNil(o.InvoiceNumber) {
		var ret string
		return ret
	}
	return *o.InvoiceNumber
}

// GetInvoiceNumberOk returns a tuple with the InvoiceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetInvoiceNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceNumber) {
		return nil, false
	}
	return o.InvoiceNumber, true
}

// HasInvoiceNumber returns a boolean if a field has been set.
func (o *CustomsInfo) HasInvoiceNumber() bool {
	if o != nil && !IsNil(o.InvoiceNumber) {
		return true
	}

	return false
}

// SetInvoiceNumber gets a reference to the given string and assigns it to the InvoiceNumber field.
func (o *CustomsInfo) SetInvoiceNumber(v string) {
	o.InvoiceNumber = &v
}

// GetLicenseNumber returns the LicenseNumber field value if set, zero value otherwise.
func (o *CustomsInfo) GetLicenseNumber() string {
	if o == nil || IsNil(o.LicenseNumber) {
		var ret string
		return ret
	}
	return *o.LicenseNumber
}

// GetLicenseNumberOk returns a tuple with the LicenseNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetLicenseNumberOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseNumber) {
		return nil, false
	}
	return o.LicenseNumber, true
}

// HasLicenseNumber returns a boolean if a field has been set.
func (o *CustomsInfo) HasLicenseNumber() bool {
	if o != nil && !IsNil(o.LicenseNumber) {
		return true
	}

	return false
}

// SetLicenseNumber gets a reference to the given string and assigns it to the LicenseNumber field.
func (o *CustomsInfo) SetLicenseNumber(v string) {
	o.LicenseNumber = &v
}

// GetDeclarationStatement returns the DeclarationStatement field value if set, zero value otherwise.
func (o *CustomsInfo) GetDeclarationStatement() string {
	if o == nil || IsNil(o.DeclarationStatement) {
		var ret string
		return ret
	}
	return *o.DeclarationStatement
}

// GetDeclarationStatementOk returns a tuple with the DeclarationStatement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetDeclarationStatementOk() (*string, bool) {
	if o == nil || IsNil(o.DeclarationStatement) {
		return nil, false
	}
	return o.DeclarationStatement, true
}

// HasDeclarationStatement returns a boolean if a field has been set.
func (o *CustomsInfo) HasDeclarationStatement() bool {
	if o != nil && !IsNil(o.DeclarationStatement) {
		return true
	}

	return false
}

// SetDeclarationStatement gets a reference to the given string and assigns it to the DeclarationStatement field.
func (o *CustomsInfo) SetDeclarationStatement(v string) {
	o.DeclarationStatement = &v
}

// GetImporterCustomsReferenceType returns the ImporterCustomsReferenceType field value if set, zero value otherwise.
func (o *CustomsInfo) GetImporterCustomsReferenceType() string {
	if o == nil || IsNil(o.ImporterCustomsReferenceType) {
		var ret string
		return ret
	}
	return *o.ImporterCustomsReferenceType
}

// GetImporterCustomsReferenceTypeOk returns a tuple with the ImporterCustomsReferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetImporterCustomsReferenceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ImporterCustomsReferenceType) {
		return nil, false
	}
	return o.ImporterCustomsReferenceType, true
}

// HasImporterCustomsReferenceType returns a boolean if a field has been set.
func (o *CustomsInfo) HasImporterCustomsReferenceType() bool {
	if o != nil && !IsNil(o.ImporterCustomsReferenceType) {
		return true
	}

	return false
}

// SetImporterCustomsReferenceType gets a reference to the given string and assigns it to the ImporterCustomsReferenceType field.
func (o *CustomsInfo) SetImporterCustomsReferenceType(v string) {
	o.ImporterCustomsReferenceType = &v
}

// GetInsuredAmount returns the InsuredAmount field value if set, zero value otherwise.
func (o *CustomsInfo) GetInsuredAmount() float64 {
	if o == nil || IsNil(o.InsuredAmount) {
		var ret float64
		return ret
	}
	return *o.InsuredAmount
}

// GetInsuredAmountOk returns a tuple with the InsuredAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetInsuredAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.InsuredAmount) {
		return nil, false
	}
	return o.InsuredAmount, true
}

// HasInsuredAmount returns a boolean if a field has been set.
func (o *CustomsInfo) HasInsuredAmount() bool {
	if o != nil && !IsNil(o.InsuredAmount) {
		return true
	}

	return false
}

// SetInsuredAmount gets a reference to the given float64 and assigns it to the InsuredAmount field.
func (o *CustomsInfo) SetInsuredAmount(v float64) {
	o.InsuredAmount = &v
}

// GetInsuredNumber returns the InsuredNumber field value if set, zero value otherwise.
func (o *CustomsInfo) GetInsuredNumber() string {
	if o == nil || IsNil(o.InsuredNumber) {
		var ret string
		return ret
	}
	return *o.InsuredNumber
}

// GetInsuredNumberOk returns a tuple with the InsuredNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetInsuredNumberOk() (*string, bool) {
	if o == nil || IsNil(o.InsuredNumber) {
		return nil, false
	}
	return o.InsuredNumber, true
}

// HasInsuredNumber returns a boolean if a field has been set.
func (o *CustomsInfo) HasInsuredNumber() bool {
	if o != nil && !IsNil(o.InsuredNumber) {
		return true
	}

	return false
}

// SetInsuredNumber gets a reference to the given string and assigns it to the InsuredNumber field.
func (o *CustomsInfo) SetInsuredNumber(v string) {
	o.InsuredNumber = &v
}

// GetSdrValue returns the SdrValue field value if set, zero value otherwise.
func (o *CustomsInfo) GetSdrValue() float64 {
	if o == nil || IsNil(o.SdrValue) {
		var ret float64
		return ret
	}
	return *o.SdrValue
}

// GetSdrValueOk returns a tuple with the SdrValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetSdrValueOk() (*float64, bool) {
	if o == nil || IsNil(o.SdrValue) {
		return nil, false
	}
	return o.SdrValue, true
}

// HasSdrValue returns a boolean if a field has been set.
func (o *CustomsInfo) HasSdrValue() bool {
	if o != nil && !IsNil(o.SdrValue) {
		return true
	}

	return false
}

// SetSdrValue gets a reference to the given float64 and assigns it to the SdrValue field.
func (o *CustomsInfo) SetSdrValue(v float64) {
	o.SdrValue = &v
}

// GetTermsOfSale returns the TermsOfSale field value if set, zero value otherwise.
func (o *CustomsInfo) GetTermsOfSale() string {
	if o == nil || IsNil(o.TermsOfSale) {
		var ret string
		return ret
	}
	return *o.TermsOfSale
}

// GetTermsOfSaleOk returns a tuple with the TermsOfSale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetTermsOfSaleOk() (*string, bool) {
	if o == nil || IsNil(o.TermsOfSale) {
		return nil, false
	}
	return o.TermsOfSale, true
}

// HasTermsOfSale returns a boolean if a field has been set.
func (o *CustomsInfo) HasTermsOfSale() bool {
	if o != nil && !IsNil(o.TermsOfSale) {
		return true
	}

	return false
}

// SetTermsOfSale gets a reference to the given string and assigns it to the TermsOfSale field.
func (o *CustomsInfo) SetTermsOfSale(v string) {
	o.TermsOfSale = &v
}

// GetRecipientTaxType returns the RecipientTaxType field value if set, zero value otherwise.
func (o *CustomsInfo) GetRecipientTaxType() string {
	if o == nil || IsNil(o.RecipientTaxType) {
		var ret string
		return ret
	}
	return *o.RecipientTaxType
}

// GetRecipientTaxTypeOk returns a tuple with the RecipientTaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetRecipientTaxTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientTaxType) {
		return nil, false
	}
	return o.RecipientTaxType, true
}

// HasRecipientTaxType returns a boolean if a field has been set.
func (o *CustomsInfo) HasRecipientTaxType() bool {
	if o != nil && !IsNil(o.RecipientTaxType) {
		return true
	}

	return false
}

// SetRecipientTaxType gets a reference to the given string and assigns it to the RecipientTaxType field.
func (o *CustomsInfo) SetRecipientTaxType(v string) {
	o.RecipientTaxType = &v
}

// GetRecipientTaxID returns the RecipientTaxID field value if set, zero value otherwise.
func (o *CustomsInfo) GetRecipientTaxID() string {
	if o == nil || IsNil(o.RecipientTaxID) {
		var ret string
		return ret
	}
	return *o.RecipientTaxID
}

// GetRecipientTaxIDOk returns a tuple with the RecipientTaxID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetRecipientTaxIDOk() (*string, bool) {
	if o == nil || IsNil(o.RecipientTaxID) {
		return nil, false
	}
	return o.RecipientTaxID, true
}

// HasRecipientTaxID returns a boolean if a field has been set.
func (o *CustomsInfo) HasRecipientTaxID() bool {
	if o != nil && !IsNil(o.RecipientTaxID) {
		return true
	}

	return false
}

// SetRecipientTaxID gets a reference to the given string and assigns it to the RecipientTaxID field.
func (o *CustomsInfo) SetRecipientTaxID(v string) {
	o.RecipientTaxID = &v
}

// GetSenderTaxType returns the SenderTaxType field value if set, zero value otherwise.
func (o *CustomsInfo) GetSenderTaxType() string {
	if o == nil || IsNil(o.SenderTaxType) {
		var ret string
		return ret
	}
	return *o.SenderTaxType
}

// GetSenderTaxTypeOk returns a tuple with the SenderTaxType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetSenderTaxTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SenderTaxType) {
		return nil, false
	}
	return o.SenderTaxType, true
}

// HasSenderTaxType returns a boolean if a field has been set.
func (o *CustomsInfo) HasSenderTaxType() bool {
	if o != nil && !IsNil(o.SenderTaxType) {
		return true
	}

	return false
}

// SetSenderTaxType gets a reference to the given string and assigns it to the SenderTaxType field.
func (o *CustomsInfo) SetSenderTaxType(v string) {
	o.SenderTaxType = &v
}

// GetSenderTaxID returns the SenderTaxID field value if set, zero value otherwise.
func (o *CustomsInfo) GetSenderTaxID() string {
	if o == nil || IsNil(o.SenderTaxID) {
		var ret string
		return ret
	}
	return *o.SenderTaxID
}

// GetSenderTaxIDOk returns a tuple with the SenderTaxID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomsInfo) GetSenderTaxIDOk() (*string, bool) {
	if o == nil || IsNil(o.SenderTaxID) {
		return nil, false
	}
	return o.SenderTaxID, true
}

// HasSenderTaxID returns a boolean if a field has been set.
func (o *CustomsInfo) HasSenderTaxID() bool {
	if o != nil && !IsNil(o.SenderTaxID) {
		return true
	}

	return false
}

// SetSenderTaxID gets a reference to the given string and assigns it to the SenderTaxID field.
func (o *CustomsInfo) SetSenderTaxID(v string) {
	o.SenderTaxID = &v
}

func (o CustomsInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomsInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReasonForExport) {
		toSerialize["reasonForExport"] = o.ReasonForExport
	}
	toSerialize["currencyCode"] = o.CurrencyCode
	if !IsNil(o.EELPFC) {
		toSerialize["EELPFC"] = o.EELPFC
	}
	if !IsNil(o.CertificateNumber) {
		toSerialize["certificateNumber"] = o.CertificateNumber
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.FromCustomsReference) {
		toSerialize["fromCustomsReference"] = o.FromCustomsReference
	}
	if !IsNil(o.ImporterCustomsReference) {
		toSerialize["importerCustomsReference"] = o.ImporterCustomsReference
	}
	if !IsNil(o.InvoiceNumber) {
		toSerialize["invoiceNumber"] = o.InvoiceNumber
	}
	if !IsNil(o.LicenseNumber) {
		toSerialize["licenseNumber"] = o.LicenseNumber
	}
	if !IsNil(o.DeclarationStatement) {
		toSerialize["declarationStatement"] = o.DeclarationStatement
	}
	if !IsNil(o.ImporterCustomsReferenceType) {
		toSerialize["importerCustomsReferenceType"] = o.ImporterCustomsReferenceType
	}
	if !IsNil(o.InsuredAmount) {
		toSerialize["insuredAmount"] = o.InsuredAmount
	}
	if !IsNil(o.InsuredNumber) {
		toSerialize["insuredNumber"] = o.InsuredNumber
	}
	if !IsNil(o.SdrValue) {
		toSerialize["sdrValue"] = o.SdrValue
	}
	if !IsNil(o.TermsOfSale) {
		toSerialize["termsOfSale"] = o.TermsOfSale
	}
	if !IsNil(o.RecipientTaxType) {
		toSerialize["recipientTaxType"] = o.RecipientTaxType
	}
	if !IsNil(o.RecipientTaxID) {
		toSerialize["recipientTaxID"] = o.RecipientTaxID
	}
	if !IsNil(o.SenderTaxType) {
		toSerialize["senderTaxType"] = o.SenderTaxType
	}
	if !IsNil(o.SenderTaxID) {
		toSerialize["senderTaxID"] = o.SenderTaxID
	}
	return toSerialize, nil
}

func (o *CustomsInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currencyCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomsInfo := _CustomsInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomsInfo)

	if err != nil {
		return err
	}

	*o = CustomsInfo(varCustomsInfo)

	return err
}

type NullableCustomsInfo struct {
	value *CustomsInfo
	isSet bool
}

func (v NullableCustomsInfo) Get() *CustomsInfo {
	return v.value
}

func (v *NullableCustomsInfo) Set(val *CustomsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomsInfo(val *CustomsInfo) *NullableCustomsInfo {
	return &NullableCustomsInfo{value: val, isSet: true}
}

func (v NullableCustomsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


